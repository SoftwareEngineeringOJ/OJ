#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>

using namespace std;

struct Point
{
    int x,y;
}node_set_n[105],node_set_m[105];

int m,n;
bool graph[105][105],have_visited[105];
int link[105],ans[105];

double cal_distance(struct Point p1,struct Point p2)
{
    double dx=(double)p1.x-p2.x;
    double dy=(double)p1.y-p2.y;
    return sqrt(dx*dx+dy*dy);
}

int dfs(int node_n)
{
    int node_m;
    for (node_m=1;node_m<=m;node_m++)
        if (graph[node_n][node_m] && have_visited[node_m]==false)
        {
            have_visited[node_m]=true;
            if (link[node_m]==-1 || dfs(link[node_m]))
            {
                link[node_m]=node_n;
                ans[node_n]=node_m;
                return 1;
            }
        }
    return 0;
}

int max_match()
{
    int i,match_num=0;
    memset(link,-1,sizeof(link));
    memset(ans,-1,sizeof(ans));
    for (i=1;i<=n;i++)
    {
        memset(have_visited,false,sizeof(have_visited));
        if (dfs(i))
            match_num++;
    }
    return match_num;
}

int main()
{
    int i,j;
    double len;
    while (scanf("%d%d",&n,&m)==2)
    {
        memset(graph,false,sizeof(graph));
        for (i=1;i<=n;i++)
            scanf("%d%d",&node_set_n[i].x,&node_set_n[i].y);
        for (i=1;i<=m;i++)
            scanf("%d%d",&node_set_m[i].x,&node_set_m[i].y);
        for (i=1;i<n;i++)
        {
            len=cal_distance(node_set_n[i],node_set_n[i+1]);
            for (j=1;j<=m;j++)
                if (cal_distance(node_set_n[i],node_set_m[j])+cal_distance(node_set_n[i+1],node_set_m[j])<=2*len)
                    graph[i][j]=true;
        }
        printf("%d\n",n+max_match());
        for (i=1;i<n;i++)
        {
            printf("%d %d ",node_set_n[i].x,node_set_n[i].y);
            if (ans[i]!=-1)
                printf("%d %d ",node_set_m[ans[i]].x,node_set_m[ans[i]].y);
        }
        printf("%d %d\n",node_set_n[n].x,node_set_n[n].y);
    }
    return 0;
}
